// Code generated by vfsgen; DO NOT EDIT

// +build !dev

package gfmstyle

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets contains the gfm.css style file for rendering GitHub Flavored Markdown.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := _vfsgen_fs{
		"/": &_vfsgen_dirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2016-07-21T18:33:18Z"),
		},
		"/gfm.css": &_vfsgen_compressedFileInfo{
			name:             "gfm.css",
			modTime:          mustUnmarshalTextTime("2016-07-21T18:56:30Z"),
			uncompressedSize: 8463,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\x59\x8f\xe3\xb8\x11\x7e\x5e\xff\x0a\xa5\x07\x0b\xec\x0e\x2c\xaf\xac\xc3\x87\x0c\x34\xd0\x13\x64\x90\x00\xd9\xbc\x04\x79\xcb\x0b\x25\x51\x16\x63\x5a\x54\x28\xba\x8f\x11\xfa\xbf\x87\xa4\x2e\x52\xa4\xa5\x6e\x64\x61\x60\xa6\xc9\x3a\x58\xf5\xd5\xc1\xa2\x7e\xfb\xea\x3c\x61\x06\x69\x09\x18\x7a\x86\xf8\x6d\xed\xdc\x6a\xe8\x94\x84\x5e\x01\x46\x3f\xe0\x26\xad\xeb\x8d\xf3\xf5\xb7\x55\x42\xb2\xb7\xe6\x0a\xe8\x19\x95\xb1\xf7\xbe\x5a\x71\xb9\x6f\xa0\x46\xa9\x03\xb2\xff\xdc\x6a\x76\x85\x25\xab\x9d\x9c\x50\x87\xc1\x57\xe6\x80\x32\x73\x30\x2a\x2f\x4e\x4a\x30\xa1\xf5\xda\x81\x2c\x95\x6a\x36\x5c\xc5\x25\x23\x2f\xa5\x2b\x14\x3a\xcd\xea\x27\xc9\x11\x3b\x5f\x82\x7d\x00\x82\xf4\xb4\x7a\x9f\xf2\x00\x95\xcb\xf3\xf7\x51\x76\x38\xad\x7e\x12\xc7\xb8\x19\x4c\x09\xe5\x86\x93\x32\xe6\x26\x97\xd0\x26\x1d\xe7\x24\xbd\x71\x0b\x8c\xfd\x82\x3c\x43\xaa\xe9\xde\x86\xe9\x21\xb5\xe9\xbe\x95\x19\xa4\xdc\x1f\x79\xc0\x2a\x25\x19\x5c\x57\x14\x36\x0c\x24\x6e\xcd\x41\x8a\x43\xbe\xcb\xd8\x5a\x10\x9a\x9c\x94\x2c\xde\xfa\xd5\xab\xf3\x67\x52\xd6\x04\x03\x7e\xf6\xc3\xdf\x51\x02\x5b\x65\xce\xef\xa4\x24\x0f\x6b\xe7\x77\x58\x62\xb2\xe6\x3c\x37\x8a\x20\x5d\x3b\x57\xbe\x5d\x57\x20\x85\xef\x42\x73\x0b\xb4\xcb\x48\x15\x7b\xa7\x6e\x91\x10\xc6\xc8\x95\xaf\xff\xef\x13\x56\xab\x04\x93\xf4\xf2\xdf\x1b\x61\x50\x8d\x29\xf7\x07\xc3\x26\x21\x94\x7b\xeb\x72\x54\x30\xa8\x6a\x18\xf7\x7f\x9c\x3a\x82\xd0\x81\xca\x33\x97\x60\xd9\x9a\x15\x4d\x05\xb2\xac\x5d\xaf\x26\xe0\x37\x02\xe1\x1c\x93\x97\xb8\x40\x59\x06\x4b\x69\xb9\x9b\x83\x2b\xc2\x6f\xf1\xc3\x5f\x21\x7e\x86\x0c\xa5\xc0\xf9\x07\xbc\x41\x6e\xf0\xb0\xc1\xdd\xf9\x27\x3c\x13\xe8\xfc\xeb\x6f\x7c\xfb\x89\x22\x80\xd7\x4e\x4e\x21\xac\x41\xc9\x7d\x15\xff\xba\x35\xa4\x28\x6f\x15\xca\x10\x6c\x77\xd5\xeb\x49\x84\xc8\x2d\x20\x3a\x17\x1c\xa0\xcd\xee\xf4\xc2\x2d\x76\x5f\x28\xa8\xe2\x84\x42\x70\x71\xc5\xfa\x5d\xb7\xf1\xf1\x6b\x9c\x23\x5a\x33\x37\x2d\x10\xce\x34\xe0\x9d\x3f\xa1\x6b\x45\x28\x03\x25\x33\x85\x38\xea\x13\x99\x3e\x3e\xf7\xc5\x9c\x0d\x48\x6a\x5e\x28\x4d\x9b\x71\x5f\x52\xcf\x33\x39\xca\xb4\x20\xb4\xa9\x48\x8d\x64\xee\x71\x09\x82\x6f\x0c\x9e\xda\x5c\x18\x92\x00\xc3\x9c\xf1\xff\x32\x54\x57\x18\xbc\xc5\x32\xa0\xa7\x2e\x14\x2e\x95\x08\x08\x44\xfa\x1d\xc9\x1e\x78\x7c\xa7\xb3\x56\x6e\xb8\x62\xe7\x8e\x09\x6d\xdd\x34\xe4\xc6\x04\xaa\xb1\x28\xaf\x29\x67\xb1\x5d\x4f\x77\x7c\x63\x27\x30\x76\x42\x63\x27\x32\x76\x76\x23\x02\x14\x62\xd9\x9b\x4e\x4a\x6c\xb6\xf0\x3a\x29\x0b\x19\x7f\x99\x0e\x2f\x6d\xfc\x13\x82\xb3\x49\x42\x84\xa6\x03\xce\x86\xa4\x3c\xe5\x08\x07\x84\xb7\x2b\xd3\x9d\x05\x7a\xb0\x40\x0f\x17\xe8\xd1\x02\x7d\xa7\xd3\x9b\x3e\xdc\xb2\xd9\x75\x59\xe4\x79\xde\x89\xd7\x99\x28\x1c\xec\xf2\xa6\x7d\x2e\xe3\x2b\x2f\x37\x6c\x09\x57\xd7\xf3\xba\x08\x9b\xde\x2e\xd0\x83\x05\x7a\xb8\x40\x8f\x16\xe8\x3b\x9d\xde\xf4\x81\xe3\xc1\xd6\xf2\xf8\x60\x4b\x63\x3d\xd6\xa7\x69\x0f\xb7\xe7\xaf\x7e\xe0\x52\x32\x7c\x8a\x3b\xf8\x14\x77\xf8\x29\xee\xe8\x53\xdc\xbb\x39\xee\x21\xa5\x50\x29\x01\x94\x8d\xc4\x52\x27\xfc\x7a\x33\x37\xe5\x4d\x68\xd6\x8c\x85\xd7\xb7\xf3\x06\x36\xde\xc0\xce\x1b\xda\x78\x43\x3b\x6f\x64\xe3\x8d\xec\xbc\x3b\x1b\xef\xce\x19\x2e\xf3\xf6\x7e\x41\x65\xc1\x6f\x1c\xa3\xa3\x17\xdb\xfe\xfe\x1b\xfa\xff\x26\xe0\xf9\x3a\x0a\xfa\x1b\x3f\xe2\x1b\x7a\x27\xf2\xfb\xcb\xb4\xef\x5e\xfc\x32\xe7\x7d\x1e\x65\xce\x17\x08\xcd\x3c\xf5\x97\x0e\xd9\x6e\xf6\x96\x43\xfc\xe8\x73\xc7\x04\x8d\xaa\xd1\x54\x18\x06\x86\x48\xa8\x89\x08\x4f\x0d\x96\x48\x65\xb1\xd0\x77\x3a\xbd\x6f\x6b\xfb\xfd\x7e\xca\x5a\x4d\xc3\x34\x8e\x31\x53\xca\x0d\x4f\x77\x88\xb1\x93\x19\x3b\x72\x00\x9a\x6e\x2e\xcc\x63\xe2\xe2\x31\x7c\x1a\x7a\x57\x38\xde\xc1\x83\xa4\x14\x71\xf8\x5d\x0e\xd2\xcb\x99\x12\x3e\x5c\xba\x9d\xcf\x70\x2f\x7e\x5d\xd0\xf8\x24\x61\x6b\x5a\x36\xcf\x1a\xad\x3d\xfa\x26\xc8\x37\xbc\x29\x09\xaf\xf7\xda\xc8\x74\x32\x50\xc6\x41\xee\x24\x96\x6e\xcd\xde\x30\x74\xd9\x5b\x65\xbf\xfc\x6f\xd8\x62\x0a\xdf\x34\x71\x26\x77\x36\x6f\x78\x76\xce\x9d\x1e\x88\xd1\x63\xa5\x0a\xd8\x80\xcf\xb0\x32\x8e\x1a\x34\x27\x53\x9d\x9c\xa8\x3a\xe9\x59\xd8\xae\x04\x04\x31\x62\xfc\x56\x4d\x8d\xe1\xc2\xa6\x3f\x1b\xf5\x3b\x52\xe9\x72\xae\x28\xa3\xb8\x22\x1b\x71\xd9\xb1\x10\xfa\x32\x96\xe1\x0d\xc7\x22\xce\x32\xc3\x8a\x51\xdd\xe3\xdd\xc1\x76\x4e\xe6\xfe\x5c\x3b\x95\x6a\x5f\x0b\xfa\x00\xfa\x82\x32\x56\xc4\x5b\xcf\xfb\xf9\x34\xcc\xfe\xe0\xc6\x48\x3b\x89\xcb\x21\x3c\x6e\xdf\x96\xea\xce\x05\xc2\x8a\x4f\x2e\xd8\x7a\x82\xc3\x9f\x18\x4b\xd0\xf7\x8c\xd6\x7a\x76\xd8\x18\x15\x51\x78\xdb\x80\x63\xdb\x95\xd8\x76\x16\xcb\x4e\x9c\x36\x66\xa5\xe6\x79\xde\x07\x45\x26\xd0\xa8\x27\x4d\xd3\x7b\x7a\xe2\x92\x15\x2d\xb6\xbf\xf8\xe5\xaf\x36\xad\x07\xf1\x9b\x8a\xa3\xeb\x99\xc7\xe2\xd5\x55\xc0\x75\xaf\xe4\x07\x27\xbe\x8a\x7c\x15\x7e\x0d\x6d\x5e\x78\x66\xd9\x9d\xaa\xe4\x6f\xb8\x72\x93\x53\x70\x9d\x06\x70\xf2\x62\xbb\x2f\xf7\x28\xfe\x9c\x08\x73\x41\xc0\x62\x91\xa4\x5d\x22\xc8\xd0\xf7\xd8\xef\x87\x72\x88\x45\x08\x1c\x8f\xb7\xc0\xe9\x03\xf1\x43\x61\x19\x8d\x90\x7f\x4a\x7c\xee\x19\xb2\x24\x6b\xf1\xa2\xb7\x37\xea\x6c\x4c\x31\x04\x94\x63\xc9\x8a\xbe\x22\x83\xc0\xb8\x08\xa5\x5e\x39\x7c\xbb\x29\x7f\xe1\x41\x3a\x8f\xab\xa2\x74\x51\x93\x0d\x69\x15\x47\x01\xb2\x05\x4a\x39\x00\xb7\xcf\x81\x56\xcf\xe2\x41\x23\x9a\xfd\x37\x01\xa9\xfb\x53\x9a\xe4\xcb\xf3\x8f\xf0\x5d\x2a\x5a\x72\xdd\x96\x42\x8a\xb5\x52\xc7\xd2\x19\xa6\xd7\x1f\x53\x21\x73\x4c\x76\xe4\xfb\x55\xd0\x75\xd0\xf6\x39\x2e\xfb\xce\x87\xea\x6b\xd0\xdc\xa6\xe7\xc4\xe3\x19\x19\x1b\xfa\xad\x39\x92\xa2\x3d\x9a\x3e\x69\xce\x87\xe2\xb1\x9c\x8a\x56\x3c\x6d\x63\x39\x53\xaf\xea\x7e\xbc\x91\xb7\xd7\xc6\x57\xde\x83\xc3\x3c\xec\x0f\x5f\x04\xba\x2f\x64\xed\x55\x7e\x88\x7e\x36\xe7\x2c\x7a\x4e\xc0\x2f\xde\x5a\xfe\x36\x5e\xf8\x6b\xdf\xc9\x29\xc8\xd0\xad\x8e\x03\xf3\x92\x16\x16\xc6\x09\xcc\x09\x35\x0c\x95\x24\x90\xf3\xb2\x30\x5d\xb8\x23\xc2\x09\x52\xa0\xc1\x90\x31\xe5\x8b\x9a\xdb\xba\xc1\x9f\x66\x8c\xd7\x59\xfc\xf0\x6f\xcf\x03\xde\x83\xcd\x16\x27\xb1\x9c\xc6\x37\xb5\x0f\x04\xc6\x80\x02\x71\xfb\xaa\x99\xbe\x8d\xef\xbc\x6d\xf8\xe0\xfb\x28\xf9\x8d\x01\x56\x45\x58\xde\x47\x96\xeb\xbd\x40\x0c\x4a\xcf\x60\xcc\x15\x29\x41\x88\x19\x05\x25\x27\x50\xee\xe3\x30\xea\x1a\x1f\xa1\x0a\x9e\x28\x58\xa6\xf3\xf2\x08\x35\x32\x0b\x9b\x6d\xf3\x7b\xef\x81\x9c\xc9\xf4\xc9\x44\xcf\x95\xc9\x83\x27\xb2\x0c\xe9\xf9\x5e\xfc\x96\x73\x46\xb7\x6a\x3a\x4d\x99\x90\x59\xe0\x6f\xc6\x0f\x98\x77\x79\xac\xd5\x23\xf6\x19\x9b\xbc\xed\x4f\xe3\x10\x81\x4a\xc4\x10\x8f\x92\x25\xb2\x03\x3a\x3d\x8f\x0a\x49\x97\x29\xa7\xa9\x5d\x26\x4c\x1f\x09\x72\x6f\xfd\x9d\x32\x19\xc8\xd6\xea\x6a\x5d\x9c\x11\x1d\xaa\xac\xaf\xa7\x0e\xc2\xd5\x4a\x49\x2e\x25\x2d\xc5\x4c\xf7\xae\x04\x6d\x53\x34\xe3\x7d\xaf\xbe\x07\x3a\x97\xd5\xa1\xb4\x8f\x8e\x22\x7d\xcd\xd7\xda\xb2\xd0\x97\x48\x5f\x12\x6d\x89\xb0\x4e\xed\x0d\x39\x86\x91\x2f\x9e\xc5\x0a\xad\xd6\x38\xeb\x44\x5f\xa6\xfa\x32\xd3\x97\xbe\xbe\x84\xfa\x52\x37\xb8\xd6\x0d\xae\x5f\xf5\xe5\xb6\x37\x31\xcb\x23\x4f\x7c\xd6\x56\x88\x17\xdd\x8a\x8b\x6e\xc5\xa5\xd4\x97\x95\xbe\xa4\xfa\x92\xe9\x4b\x6d\x45\x2c\xef\x04\x4d\xb6\xb7\x31\x8c\x0e\x1a\x45\xb7\x2f\xbd\xea\xcb\xc1\xb5\xe3\xf1\x60\x3e\x0b\x75\x45\xba\xf1\x69\x3d\x8a\x1e\x2d\xef\x47\x9d\x75\x5e\x75\xd9\xa8\xc3\xa7\x4a\x00\xda\x99\xe5\xb3\xb6\x7c\xd6\x7d\x7b\x3e\xeb\x4b\xd4\x0c\x1f\x91\x0f\xfc\xa7\x2b\x4e\x14\xe2\xee\xdb\xe4\xd4\x54\x01\x73\xde\xb5\x92\x0c\x7a\x8e\x21\x3c\x1e\x75\xe2\x60\xc1\xc1\xf3\x0c\x0b\xe0\x88\x9f\x27\x3e\x73\xcf\x9f\x93\xeb\x65\xb2\xc0\x3d\x00\x1a\x45\x91\x4e\x61\xa3\xdf\x86\x49\x90\xd2\x9e\x0a\x76\xdb\xfd\x76\x6f\xfb\x8a\x13\x64\x7e\xe6\x6b\x62\xe7\x4c\xd1\x69\xbb\x53\xb2\x6c\xc2\xef\x6c\x5e\x17\x44\x00\xd0\x45\xe0\x42\x06\x9d\x47\xcb\x81\x37\xad\xd1\x73\xa1\xa4\xaa\x4e\x41\xf3\x76\x64\xf9\xc4\x74\xb4\x68\x3a\xc8\x27\xa6\x0f\x19\x72\x38\xe8\x95\x79\xae\xee\x45\xe9\x5c\xcf\x57\xfb\xf9\xa6\x27\xd6\x7c\x36\x9c\xd9\x0c\x36\xe4\x65\xfe\xa8\x97\x5e\x36\x49\x12\xbd\x37\x0f\x88\x7b\xdb\xfd\x31\xd8\xe9\xc4\xa1\x39\x1c\x92\x70\xb7\xd7\xaf\x9e\xa4\xba\x1b\x8e\x54\xed\x29\x26\xb6\x7f\x79\xfa\xee\x7f\xe7\x50\x89\xef\x76\x6e\x5a\x17\x80\x56\x8e\xd6\x05\xd5\xe4\xfe\xfe\x7d\x86\x91\x7d\x94\x73\x2c\x3c\xcf\x33\xca\xb4\xbf\x19\xef\x0a\x0f\xfe\xf8\xdf\x8e\xdb\xa7\xb9\x63\x4a\xfd\x98\xfb\x9c\x03\xb2\x4f\xc1\x36\xda\xce\x80\x51\xa7\x13\xce\xd5\xff\x02\x00\x00\xff\xff\x4b\xb3\xe9\x3d\x0f\x21\x00\x00"),
		},
	}

	fs["/"].(*_vfsgen_dirInfo).entries = []os.FileInfo{
		fs["/gfm.css"].(os.FileInfo),
	}

	return fs
}()

type _vfsgen_fs map[string]interface{}

func (fs _vfsgen_fs) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *_vfsgen_compressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &_vfsgen_compressedFile{
			_vfsgen_compressedFileInfo: f,
			gr: gr,
		}, nil
	case *_vfsgen_dirInfo:
		return &_vfsgen_dir{
			_vfsgen_dirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// _vfsgen_compressedFileInfo is a static definition of a gzip compressed file.
type _vfsgen_compressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *_vfsgen_compressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *_vfsgen_compressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *_vfsgen_compressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *_vfsgen_compressedFileInfo) Name() string       { return f.name }
func (f *_vfsgen_compressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *_vfsgen_compressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *_vfsgen_compressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *_vfsgen_compressedFileInfo) IsDir() bool        { return false }
func (f *_vfsgen_compressedFileInfo) Sys() interface{}   { return nil }

// _vfsgen_compressedFile is an opened compressedFile instance.
type _vfsgen_compressedFile struct {
	*_vfsgen_compressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *_vfsgen_compressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f._vfsgen_compressedFileInfo.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *_vfsgen_compressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case os.SEEK_SET:
		f.seekPos = 0 + offset
	case os.SEEK_CUR:
		f.seekPos += offset
	case os.SEEK_END:
		f.seekPos = f._vfsgen_compressedFileInfo.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *_vfsgen_compressedFile) Close() error {
	return f.gr.Close()
}

// _vfsgen_dirInfo is a static definition of a directory.
type _vfsgen_dirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *_vfsgen_dirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *_vfsgen_dirInfo) Close() error               { return nil }
func (d *_vfsgen_dirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *_vfsgen_dirInfo) Name() string       { return d.name }
func (d *_vfsgen_dirInfo) Size() int64        { return 0 }
func (d *_vfsgen_dirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *_vfsgen_dirInfo) ModTime() time.Time { return d.modTime }
func (d *_vfsgen_dirInfo) IsDir() bool        { return true }
func (d *_vfsgen_dirInfo) Sys() interface{}   { return nil }

// _vfsgen_dir is an opened dir instance.
type _vfsgen_dir struct {
	*_vfsgen_dirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *_vfsgen_dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == os.SEEK_SET {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d._vfsgen_dirInfo.name)
}

func (d *_vfsgen_dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d._vfsgen_dirInfo.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d._vfsgen_dirInfo.entries)-d.pos {
		count = len(d._vfsgen_dirInfo.entries) - d.pos
	}
	e := d._vfsgen_dirInfo.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
