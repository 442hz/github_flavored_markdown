// Code generated by vfsgen; DO NOT EDIT

// +build !dev

package gfmstyle

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets contains the gfm.css style file for rendering GitHub Flavored Markdown.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := _vfsgen_fs{
		"/": &_vfsgen_dirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2016-07-28T18:38:11Z"),
		},
		"/gfm.css": &_vfsgen_compressedFileInfo{
			name:             "gfm.css",
			modTime:          mustUnmarshalTextTime("2016-07-28T19:36:43Z"),
			uncompressedSize: 8407,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\x59\x8f\xe3\xb8\x11\x7e\x5e\xff\x0a\xa5\x07\x0b\xec\x0e\x2c\xaf\xac\xc3\x76\xcb\x40\x03\x33\x41\x06\x09\x90\xcd\x4b\x90\xb7\xbc\x50\x12\x65\x31\x96\x45\x85\xa2\xfb\x18\x61\xfe\x7b\x48\xea\xe2\x25\xa9\x1b\x59\x18\x98\x69\xd6\xc5\xaa\xaf\xaa\xc8\xa2\x7e\xfb\xec\x7c\x05\x0d\x4a\x1d\x90\xfd\xe7\xde\xd0\x1b\xac\x68\xe3\xe4\x98\x38\x14\xbe\x52\x07\x54\x99\x53\xa2\xea\xea\xa4\xb8\xc4\xa4\xd9\x3a\x90\xa6\x3b\xe7\xf3\x6f\x9b\xdd\x0d\x90\x6b\x86\x5f\x2a\x37\xc1\xd9\x9b\xd3\x6e\x7e\x12\x12\xb1\xf3\x29\x38\x06\x20\x48\xcf\x9b\x1f\xba\x0c\x90\xa5\x3c\xff\x18\x65\xa7\xf3\xe6\x27\xbe\x8d\x9b\xc1\x14\x13\x40\x11\xae\x62\xa7\xc2\x15\xb4\x69\xc7\x39\x4e\xef\xcc\x03\x83\x5e\xe0\x67\x48\x14\xdb\xfb\x30\x3d\xa5\x36\xdb\xf7\x2a\x83\x84\xc5\x23\x36\xd8\xa4\x38\x83\xdb\x9a\xc0\x96\x82\xc4\x6d\xd0\x77\x18\x87\x8c\x4a\xe9\x96\x33\xda\x1c\x57\x34\xde\xfb\xf5\xab\xf3\x67\x5c\x35\xb8\x04\x6c\xef\x87\xbf\xa3\x04\x76\xc6\x9c\xdf\x71\x85\x1f\xb6\xce\xef\xb0\x2a\xf1\x96\xc9\xdc\x09\x82\x64\xeb\xdc\x18\xb9\xa9\x41\x0a\x7f\x70\xcb\xcc\xd7\x0b\xaa\x5c\x8a\xeb\xd8\x3b\xf7\x8b\x04\x53\x8a\x6f\x6c\xfd\x7f\xef\xb0\xd9\x24\x25\x4e\xaf\xff\xbd\x63\x3a\x6c\x15\x7b\x3c\x04\x90\x94\xb0\x4d\x30\x61\xd1\xba\x0c\x95\x12\xd4\x0d\x8c\x87\x3f\xce\x3d\x83\xdb\x40\xd5\x85\x69\xd0\x6c\x4b\x8b\xb6\x06\x59\xd6\xad\x37\x1a\xf8\x2d\x47\x38\x2f\xf1\x4b\x5c\xa0\x2c\x83\x95\xf0\xdc\xcd\xc1\x0d\x95\x6f\xf1\xc3\x5f\x61\xf9\x0c\x29\x4a\x81\xf3\x0f\x78\x87\xcc\xe1\x91\xc0\xc2\xf9\x27\xbc\x60\xe8\xfc\xeb\x6f\x8c\xfc\x85\x20\x50\x6e\x9d\x9c\x40\xd8\x80\x8a\xc5\xca\xff\x75\x1b\x48\x50\xde\x19\x14\x29\xd8\x1f\xea\xd7\x33\x4f\x91\x5b\x40\x74\x29\x18\x40\xbb\xc3\xf9\x85\x79\xec\xbe\x10\x50\xc7\x09\x81\xe0\xea\xf2\xf5\x0f\xd5\xc7\xa7\xcf\x71\x8e\x48\x43\xdd\xb4\x40\x65\xa6\x00\xef\xfc\x09\xdd\x6a\x4c\x28\xa8\xa8\xa9\xc4\x50\xd7\x74\x86\xfc\xcc\xab\x39\x3b\x90\x34\xac\x51\xda\xae\xe2\x3e\xa5\x9e\x67\x4a\x54\x69\x81\x49\x5b\xe3\x06\x89\xda\x63\x1a\xb8\xbc\x53\x78\xee\x6a\x61\x2c\x82\x12\xe6\x94\xfd\x97\xa1\xa6\x2e\xc1\x5b\x2c\x12\x7a\xee\x53\xe1\x12\x81\x00\x47\x64\xa0\x08\xf1\xc0\x63\x94\xde\x5b\x41\x70\x39\x65\xc6\x85\xae\x6f\x5a\x7c\xa7\x1c\xd5\x98\xb7\x97\x2e\x59\xec\xb7\x3a\xc5\x37\x28\x81\x41\x09\x0d\x4a\x64\x50\x0e\x13\x02\x04\x96\xac\xae\x9f\xe1\x59\xca\xcd\x1e\xde\xb4\xb6\x10\xf9\x17\xe5\xf0\xd2\xe5\x3f\xc1\x65\xa6\x15\x44\x68\x06\xe0\xec\x70\xca\x4a\x0e\x33\x40\xd8\x71\x65\x86\xb3\xc2\x0f\x56\xf8\xe1\x0a\x3f\x5a\xe1\x1f\x54\x7e\x3b\xa4\x5b\x1c\x76\x7d\x15\x79\x9e\x77\x66\x7d\xc6\x1b\xa7\x74\x41\x89\x2e\x55\x7c\x63\xed\x56\x5a\xd2\xd5\x9f\x79\x7d\x86\xcd\x68\x57\xf8\xc1\x0a\x3f\x5c\xe1\x47\x2b\xfc\x83\xca\x6f\x87\xc4\xb1\x64\x2b\x75\x7c\xb2\x95\xb1\x9a\xeb\xb3\x7e\x86\xdb\xeb\x57\xdd\x70\xad\x18\x3e\x24\x1d\x7c\x48\x3a\xfc\x90\x74\xf4\x21\xe9\xc3\x92\xf4\x58\x52\xa8\x12\x00\x8a\x83\xc4\xd2\x27\xec\x7a\x33\x89\xe2\x26\x34\x7b\xc6\x22\xeb\xdb\x65\x03\x9b\x6c\x60\x97\x0d\x6d\xb2\xa1\x5d\x36\xb2\xc9\x46\x76\xd9\x83\x4d\xf6\xe0\x8c\x97\x79\x77\xbf\xa0\xaa\x60\x37\x8e\x71\xa2\x17\xfb\xe1\xfe\x1b\xcf\xff\x5d\xc0\xea\x75\x52\xf4\x77\x7e\xc4\x08\xea\x49\xe4\x0f\x97\xe9\x70\x7a\xb1\xcb\x9c\x9d\xf3\x28\x73\x3e\x41\x68\xd6\xa9\xbf\xb6\xc9\x7e\x77\xb4\x6c\xe2\x47\x1f\xdb\x26\x68\x65\x8b\xa6\xc1\x30\x30\x54\x42\x45\x85\x47\x6a\x88\x44\xb2\x88\x85\x7f\x50\xf9\xc3\xb1\x76\x3c\x1e\x75\xd1\x5a\x4f\xd3\x34\xc6\xe8\x9c\x7b\xa9\x53\xb0\x41\xc9\x0c\x8a\x18\x80\x74\xe2\xca\x3c\xc6\x2f\x1e\x23\xa6\xf1\xec\x0a\xa7\x3b\x78\xd4\x14\x2a\x0e\xbb\xcb\x41\x7a\xbd\x10\xcc\x86\x4b\xb7\x8f\x19\x1e\xf9\xaf\x4f\x1a\x9b\x24\x6c\x87\x96\x2d\xb2\x56\x39\x1e\x7d\x13\xe4\x7b\xb9\xab\x30\xeb\xf7\xc6\xa8\x74\x3c\x72\xa6\x41\xee\xcc\x97\x6e\x43\xdf\x4a\xe8\xd2\xb7\xda\x7e\xf9\xdf\x4b\x8b\x2b\x8c\x68\xe2\x8c\x67\x88\xf7\x72\x71\xce\xd5\x37\x2c\xd1\x53\x2d\x2b\xd8\x80\xcf\x4a\x69\x1c\x35\x78\x4e\x26\x07\xa9\x99\x3a\xab\x55\xd8\xad\x38\x04\x31\xa2\xec\x56\x4d\x8d\xe1\xc2\x66\x3f\x9b\xec\x3b\xc2\xe8\x7a\xad\x48\xa3\xb8\xa4\x1b\x31\xdd\xa9\x11\x86\x36\x16\xe9\x0d\xa7\x26\xce\x32\xc3\x8b\xc9\xdc\xd3\xec\x60\xbb\xa4\x33\x3f\xd7\xea\x5a\xdd\x6b\x41\x1d\x40\x5f\x50\x46\x8b\x78\xef\x79\x3f\x9f\xc7\xd9\x1f\xdc\x29\xee\x26\x71\x31\x84\xb3\x62\x22\x37\x50\xca\x94\x2b\x84\x35\x9b\x5c\x4a\xeb\x0e\x0e\x7b\x62\xac\x41\x3f\x08\x5a\xfb\xd9\xa1\x53\x56\x78\xe3\xed\x03\x86\x6d\xdf\x62\xfb\x45\x2c\x7b\x75\xd2\x9a\x9d\x9a\xe7\xf9\x90\x14\x51\x40\x93\x9d\x34\x4d\xe7\xec\xc4\x15\x2d\x3a\x6c\x7f\xf1\xab\x5f\x6d\x56\x4f\xfc\xa7\xab\xa3\xdb\x85\xe5\xe2\xd5\x95\xc0\x75\x6f\xf8\x3b\x63\xbe\xf2\x7a\xe5\x71\x8d\xc7\x3c\x8f\xcc\x42\xd5\x4d\xb2\x37\x5c\xb5\xcb\x09\xb8\xe9\x09\xd4\x5e\x6c\xf3\x7a\x4f\xfc\x4f\x4d\x99\x29\x02\x1a\xf3\x22\xed\x0b\x41\xa4\x7e\xc0\xfe\x38\xb6\x43\xcc\x53\xe0\x78\xec\x08\xd4\x1f\x88\xef\x4a\xcb\xe4\x84\xf8\x53\xe0\x33\xe7\xc8\x9a\xae\x25\x8a\xc1\xdf\xa8\xf7\x31\x2d\x21\x20\x0c\x4b\x5a\x0c\x1d\x19\x04\xc6\x45\x28\xec\x8a\xe1\xdb\x4d\xd9\x0b\x0f\x92\x65\x5c\x25\xa3\xab\x96\x6c\x48\xcb\x38\x72\x90\x2d\x50\x8a\x01\xb8\x7b\x0e\x74\x76\x56\x37\x9a\xd0\x1c\xbe\x09\x08\xdb\x1f\xb2\x24\x5e\x9e\x7f\x44\xec\xc2\xd0\x5a\xe8\xb6\x12\x92\xbc\x15\x36\xd6\xf6\x30\xa3\x7e\x9f\x09\x51\x63\xe2\x44\x9e\xef\x82\xfe\x04\xed\x9e\xe3\xe2\xdc\x79\x57\x7f\x8d\x96\xbb\xf2\xd4\x22\x5e\xd0\xb1\xa1\xdf\xb9\x23\x38\xca\xa3\xe9\x83\xee\xbc\x2b\x1f\xeb\xa5\x68\xc5\xd3\x36\x96\x53\xf9\xaa\x1e\xc6\x1b\x71\x7b\xed\x7c\xe9\x3d\x38\xce\xc3\xfe\xf8\x45\xa0\xff\x42\xd6\x5d\xe5\xa7\xe8\x67\x73\xce\x22\x97\x04\xfc\xe2\x6d\xc5\x6f\xe7\x85\xbf\x0e\x27\x39\x01\x19\xba\x37\x71\x60\x5e\xd2\xdc\xc3\x38\x81\x39\x26\x86\xa3\x82\x05\x72\xd6\x16\x66\x08\x33\x2a\x8c\x21\x14\xda\x12\x52\x2a\x7d\x51\x73\xbb\x30\xd8\xd3\x8c\xb2\x3e\x8b\x1f\xfe\xed\x79\xc0\x7b\xb0\xf9\xe2\x24\x96\xdd\x18\x51\xf9\x40\x60\x0c\x28\xb0\xec\x5e\x35\xfa\xdb\x78\xe6\x6d\xc3\x06\xdf\x27\x21\x6f\x0c\xb0\x32\xc2\xe2\x3e\xb2\x5c\xef\x05\xa2\x50\x44\x06\x63\x66\x48\x4a\x42\x4c\x09\xa8\x18\x83\xb0\x18\xc7\x51\xd7\xf8\x08\x55\xb0\x42\x29\x45\x39\xaf\x8f\x50\x93\x30\xf7\xd9\x36\xbf\x0f\x11\x88\x99\x4c\x9d\x4c\xd4\x5a\xd1\x1e\x3c\x91\x65\x48\xcf\x8f\xfc\xb7\x5e\x33\xaa\x57\xfa\x34\x65\x42\x66\x81\xbf\x9d\x3e\x60\xce\xca\x58\xbb\x87\xd3\x29\xd5\xde\xf6\xe7\x69\x88\x40\x15\xa2\x88\x65\xc9\x92\xd9\x11\x9d\x41\x46\x86\xa4\xaf\x94\xb3\xee\x97\x09\xd3\x7b\x92\x3c\x78\x3f\xd3\x26\x23\xdb\xda\x5d\x5d\x88\x0b\xaa\x63\x97\x0d\xfd\xd4\x43\xb8\xd9\x48\xc5\x25\x95\x25\x9f\xe9\x7e\x48\x49\xdb\x15\xed\x74\xdf\xcb\xef\x81\x3e\x64\x79\x28\x1d\xb2\x23\x69\xdf\xf2\xad\xb2\x2c\xd4\x25\x52\x97\x58\x59\xa2\x52\xe5\x0e\x8e\x3c\x86\x91\xcf\x9f\xc5\x12\xaf\x51\x24\x9b\x44\x5d\xa6\xea\x32\x53\x97\xbe\xba\x84\xea\x52\x75\xb8\x51\x1d\x6e\x5e\xd5\xe5\x7e\x70\x31\xcb\x23\x8f\x7f\xd6\x96\x98\x57\xd5\x8b\xab\xea\xc5\xb5\x52\x97\xb5\xba\x24\xea\x92\xaa\x4b\x65\x85\x2d\xef\x04\x45\x77\xf0\x31\x8c\x4e\x0a\x47\xf5\x2f\xbd\xa9\xcb\x31\xb4\xc7\xc7\x93\xf9\x2c\x54\x0d\xa9\xce\xa7\xcd\xa4\xfa\x68\x79\x3f\xaa\xa2\xcb\xa6\xab\x56\x1e\x3e\x65\x06\x50\xf6\xac\x9e\x95\xe5\xb3\x1a\xdb\xf3\x45\x5d\xa2\x76\xfc\x88\x7c\x62\x3f\xd5\x70\x22\x31\x0f\x5f\xb5\x5d\x53\x09\xcc\xe5\xd0\x2a\x3c\xda\x79\x0c\xe1\xe3\xa3\xca\x1c\x3d\x38\x79\x9e\xe1\x01\x9c\xf0\xf3\xf8\x67\xee\xe5\x7d\x72\xb5\x4d\x56\xa4\x47\x40\xa3\x28\x52\x39\x74\x8a\xdb\x70\x09\x12\x32\x70\xc1\x61\x7f\xdc\x1f\x6d\x5f\x71\x82\xcc\xcf\x7c\x45\xed\x92\x49\x36\x6d\x77\x4a\x96\x69\xf2\xce\xee\x75\x45\x05\x00\x55\x05\xae\x54\xd0\x65\xf2\x1c\x78\x7a\x8f\x5e\x0a\xa9\x54\x55\x0e\x5a\xf6\x23\xcb\x35\xd7\xd1\xaa\xeb\x20\xd7\x5c\x1f\x2b\xe4\x74\x52\x3b\xf3\x52\xcf\x65\xe9\xd2\x2c\x77\xfb\xe5\xae\x16\xd6\x72\x35\x5c\xe8\x02\x36\xf8\x65\x79\xab\x97\x41\x37\x49\x12\xf5\x6c\x1e\x11\xf7\xf6\xc7\xc7\xe0\xa0\x32\xc7\xc3\xe1\x94\x84\x87\xa3\x7a\xf5\x24\xf5\x6c\x3a\x52\xf9\x4c\x31\xb1\xfd\xcb\x97\x6f\xfe\x37\x06\x15\xff\x6e\xe7\xa6\x4d\x01\x48\xed\x28\xa7\xa0\x5c\xdc\xdf\xbe\x2d\x08\xd2\xf7\x4a\x4e\x8d\xe7\x79\x46\x9b\x0e\x37\xe3\xac\xf2\x18\x8f\xff\xf5\x71\xff\x65\x69\x9b\x4a\xdd\x66\x5e\x72\x44\xf6\x4b\xb0\x8f\xf6\x0b\x60\x34\xa9\x26\xb9\xf9\x5f\x00\x00\x00\xff\xff\x09\x59\xed\xa4\xd7\x20\x00\x00"),
		},
	}

	fs["/"].(*_vfsgen_dirInfo).entries = []os.FileInfo{
		fs["/gfm.css"].(os.FileInfo),
	}

	return fs
}()

type _vfsgen_fs map[string]interface{}

func (fs _vfsgen_fs) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *_vfsgen_compressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &_vfsgen_compressedFile{
			_vfsgen_compressedFileInfo: f,
			gr: gr,
		}, nil
	case *_vfsgen_dirInfo:
		return &_vfsgen_dir{
			_vfsgen_dirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// _vfsgen_compressedFileInfo is a static definition of a gzip compressed file.
type _vfsgen_compressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *_vfsgen_compressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *_vfsgen_compressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *_vfsgen_compressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *_vfsgen_compressedFileInfo) Name() string       { return f.name }
func (f *_vfsgen_compressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *_vfsgen_compressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *_vfsgen_compressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *_vfsgen_compressedFileInfo) IsDir() bool        { return false }
func (f *_vfsgen_compressedFileInfo) Sys() interface{}   { return nil }

// _vfsgen_compressedFile is an opened compressedFile instance.
type _vfsgen_compressedFile struct {
	*_vfsgen_compressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *_vfsgen_compressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f._vfsgen_compressedFileInfo.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *_vfsgen_compressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case os.SEEK_SET:
		f.seekPos = 0 + offset
	case os.SEEK_CUR:
		f.seekPos += offset
	case os.SEEK_END:
		f.seekPos = f._vfsgen_compressedFileInfo.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *_vfsgen_compressedFile) Close() error {
	return f.gr.Close()
}

// _vfsgen_dirInfo is a static definition of a directory.
type _vfsgen_dirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *_vfsgen_dirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *_vfsgen_dirInfo) Close() error               { return nil }
func (d *_vfsgen_dirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *_vfsgen_dirInfo) Name() string       { return d.name }
func (d *_vfsgen_dirInfo) Size() int64        { return 0 }
func (d *_vfsgen_dirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *_vfsgen_dirInfo) ModTime() time.Time { return d.modTime }
func (d *_vfsgen_dirInfo) IsDir() bool        { return true }
func (d *_vfsgen_dirInfo) Sys() interface{}   { return nil }

// _vfsgen_dir is an opened dir instance.
type _vfsgen_dir struct {
	*_vfsgen_dirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *_vfsgen_dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == os.SEEK_SET {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d._vfsgen_dirInfo.name)
}

func (d *_vfsgen_dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d._vfsgen_dirInfo.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d._vfsgen_dirInfo.entries)-d.pos {
		count = len(d._vfsgen_dirInfo.entries) - d.pos
	}
	e := d._vfsgen_dirInfo.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
